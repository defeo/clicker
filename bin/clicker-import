#!/usr/bin/node

const config = require('../config');
const models = require('../lib/models');
const request = require('request-promise');
const mongoose = require('mongoose');
const mongo = (process.env.DEBUG || config.debug) ? config.mongo.test : config.mongo.production
mongoose.connect(mongo.url, mongo.options);
mongoose.connection.on('error', () => {
    throw new Error('Unable to connect to ' + mongo_url);
});
const yaml = require('yamljs');

const program = require('commander');

function pollMap(polls, cb) {
    if (polls.some((x) => !x.endsWith('.yml') && !x.endsWith('.yaml') && !x.endsWith('.json'))) {
	console.error('Can only read .yml and .json files');
	process.exit(1);
    }
    return Promise.all(polls.map((p) => cb(p.endsWith('.yml') || p.endsWith('.yaml')
					   ? yaml.load(p)
					   : p.endsWith('.json')
					   ? require(p)
					   : null)));
}

program
    .command('import')
    .description('Import poll')
    .arguments('<polls...>')
    .action((polls) => {
	pollMap(polls, (p) => (new models.Poll(p)).save())
	    .then((polls) => console.log(polls.map((x) => x._id)))
	    .catch((err) => {
		console.error(err.message);
		process.exit(1);
	    })
	    .then(() => mongoose.connection.close());
    });

program
    .command('upload')
    .description('Import poll')
    .option('-s, --server <server>', 'Server')
    .option('-t, --token <token>', 'Server')
    .arguments('<polls...>')
    .action((polls, opts) => {
	var server = opts.server || config.remoteServer || 'http://localhost:8080';
	var token = opts.token || config.authToken;
	if (!token) {
	    console.error('Cannot authenticate');
	    process.exit(1);
	}
	pollMap(polls, (p) => request({
	    method: 'PUT',
	    uri: server + '/polls',
	    headers: { Authorization: 'bearer ' + token },
	    body: p,
	    json: true,
	}))
	    .then((polls) => console.log(polls.map((x) => x._id)))
	    .catch((err) => {
		console.error(err.message);
		process.exit(1);
	    })
	    .then(() => mongoose.connection.close());
    });

program.parse(process.argv);
